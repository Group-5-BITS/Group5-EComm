/**
 * Beckn Core API
 * Beckn Core API specification
 *
 * The version of the OpenAPI document: 0.9.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Fulfillment } from "./fulfillment";
import { Item } from "./item";
import { Payment } from "./payment";
import { Category } from "./category";
import { Offer } from "./offer";
import { Descriptor } from "./Descriptor";
import { Time } from "./Time";
import { ApiProperty, getSchemaPath } from "@nestjs/swagger";
import { Location } from "./location";

// import { Fulfillment } from "./fulfillment";


/**
 * Describes a service provider. This can be a restaurant, a hospital, a Store etc
 */
export class Provider {
  /**
   * Id of the provider
   */
  id?: string;
  descriptor?: Descriptor;
  /**
   * Category Id of the provider
   */
  category_id?: string;
  rating?: number;
  time?: Time;
  categories?: Array<Category>;
  fulfillments?: Array<Fulfillment>;
  // @ApiProperty({type: () => Payment})
  payments?: Payment[];

  @ApiProperty({
    type: "array",
    items: {
      allOf: [
        { $ref: getSchemaPath(Location) },
        {
          type: "object", properties: {
            rateable: {
              type: "boolean"
            }
          }
        }
      ]
    }
  })
  locations?: Location[];
  offers?: Array<Offer>;
  items?: Array<Item>;
  /**
   * Time after which catalog has to be refreshed
   */
  exp?: string;
  /**
   * If the entity can be rated or not
   */
  rateable?: boolean;
  /**
   * Describes a tag. This is a simple key-value store which is used to contain extended metadata
   */
  tags?: { [key: string]: string; };
}

